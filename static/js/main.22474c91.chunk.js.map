{"version":3,"sources":["utils/httpModule.js","components/Details/Details.js","components/Listing/UserActions.js","utils/constants/table-config.js","components/Listing/helpers.js","components/Listing/UserTable.js","components/Listing/FilterBox.js","utils/constants/urls.js","utils/errorLogs.js","components/Listing/Listing.js","components/App.js","serviceWorker.js","index.js"],"names":["httpMethod","Details","react_default","a","createElement","data-testid","Component","UserActions","_ref","actions","isActive","filter","action","actionName","map","index_es","key","actionId","variant","color","TABLE_HEADERS","id","value","USER_ACTIONS","getFullName","firstName","lastName","UserTable","state","userActions","this","setState","Object","assign","toShow","users","props","headers","email","first_name","last_name","dob","phone","active","format","Date","differenceInYears","now","style","fontWeight","getActiveText","Listing_UserActions","FilterBox","handleChange","event","_this","handleFilterBoxChange","target","handleSubmit","preventDefault","onSubmit","label","InputProps","inputProps","aria-label","onChange","margin","instance","axios","create","baseURL","http","GET","get","predicate","url","ifElse","fromPromise","Rejected","isString","logUrlError","console","log","Listing","filterText","text","filterUsersByText","user","regex","RegExp","test","_this2","res","values","data","fork","localStorage","setItem","JSON","stringify","_this$state","filteredUsers","Grid_default","container","spacing","item","xs","Listing_FilterBox","Listing_UserTable","searchValue","App","BrowserRouter","Switch","Route","path","component","Boolean","window","location","hostname","match","ReactDOM","render","components_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.22474c91.chunk.js","sourcesContent":["import axios from 'axios'\nimport ifElse from 'crocks/logic/ifElse'\nimport isString from 'crocks/predicates/isString'\nimport { fromPromise, Rejected } from 'crocks/Async'\n\nimport { BASE_URL } from './constants/urls'\n\nconst instance = axios.create({\n  baseURL: BASE_URL,\n})\n\nconst safeAsyncRequest = httpMethod => predicate => url =>\n  ifElse(predicate, fromPromise(httpMethod), Rejected, url)\n\nconst getResource = safeAsyncRequest(instance.get)\n\nconst http = {\n  GET: getResource(isString),\n}\n\nexport { http }\n","import React, { Component } from 'react'\n\nclass Details extends Component {\n  render() {\n    return <span data-testid=\"details\">details</span>\n  }\n}\n\nexport default Details\n","import React from 'react'\nimport { Button } from '@material-ui/core'\n\nconst UserActions = ({ actions, isActive }) => {\n  return actions\n    .filter(action => {\n      if (isActive && action.actionName === 'Activate') {\n        return false\n      }\n      if (!isActive && action.actionName === 'Deactivate') {\n        return false\n      }\n      return true\n    })\n    .map(action => (\n      <Button key={action.actionId} variant=\"outlined\" color={action.color}>\n        {action.actionName}\n      </Button>\n    ))\n}\n\nexport default UserActions\n","/**\n * To further parametrize this whole thing,\n * one can fetch these details from a server\n * through an API so that any change in these,\n * does not trigger a build process.\n */\nconst TABLE_HEADERS = [\n  { id: 1, value: 'Name' },\n  { id: 2, value: 'Date of Birth' },\n  { id: 3, value: 'Age' },\n  { id: 4, value: 'Email' },\n  { id: 5, value: 'Mobile' },\n  { id: 6, value: 'Active' },\n  { id: 7, value: 'Actions' },\n]\n\nconst USER_ACTIONS = [\n  { actionId: 1, actionName: 'View', color: 'primary' },\n  { actionId: 2, actionName: 'Edit', color: 'primary' },\n  { actionId: 3, actionName: 'Activate', color: 'primary' },\n  { actionId: 4, actionName: 'Deactivate', color: 'secondary' },\n]\n\nexport { TABLE_HEADERS, USER_ACTIONS }\n","export const getFullName = (firstName, lastName) => {\n  return firstName + ' ' + lastName\n}\n","import React, { Component } from 'react'\nimport {\n  Table,\n  TableHead,\n  TableRow,\n  TableCell,\n  TableBody,\n  Paper,\n} from '@material-ui/core'\nimport { format, differenceInYears } from 'date-fns'\n\nimport UserActions from './UserActions'\n\nimport { USER_ACTIONS, TABLE_HEADERS } from '../../utils/constants/table-config'\nimport { getFullName } from './helpers'\n\nconst getActiveColorStyle = isActive => (isActive ? 'green' : 'red')\nconst getActiveText = isActive => (isActive ? 'Active' : 'Inactive')\n\nclass UserTable extends Component {\n  state = {\n    userActions: [],\n  }\n\n  componentDidMount() {\n    this.setState({\n      // This is done to increase the customizability of the actions.\n      // If anytime in the future, the business requirement changes,\n      // just add a filter to the chain to filter out the ones that\n      // are not to be shown.\n      userActions: USER_ACTIONS.map(action =>\n        Object.assign({}, action, { toShow: true })\n      ),\n    })\n  }\n\n  render() {\n    const { users } = this.props\n    const { userActions } = this.state\n    return (\n      <Paper>\n        <Table>\n          <TableHead>\n            <TableRow>\n              {TABLE_HEADERS.map(headers => (\n                <TableCell key={headers.id}> {headers.value} </TableCell>\n              ))}\n            </TableRow>\n          </TableHead>\n          <TableBody>\n            {users.map(\n              ({ email, first_name, last_name, dob, phone, active }) => {\n                return (\n                  <TableRow key={email}>\n                    <TableCell>{getFullName(first_name, last_name)}</TableCell>\n                    <TableCell>{format(new Date(dob), 'DD-MM-YYYY')}</TableCell>\n                    <TableCell>\n                      {differenceInYears(Date.now(), new Date(dob)) + ' Years'}\n                    </TableCell>\n                    <TableCell>{email}</TableCell>\n                    <TableCell>{phone}</TableCell>\n                    <TableCell\n                      style={{\n                        color: getActiveColorStyle(active),\n                        fontWeight: 'bold',\n                      }}\n                    >\n                      {getActiveText(active)}\n                    </TableCell>\n                    <TableCell>\n                      <UserActions actions={userActions} isActive={active} />\n                    </TableCell>\n                  </TableRow>\n                )\n              }\n            )}\n          </TableBody>\n        </Table>\n      </Paper>\n    )\n  }\n}\n\nexport default UserTable\n","import React, { Component } from 'react'\nimport { TextField } from '@material-ui/core'\n\nclass FilterBox extends Component {\n  handleChange = event => {\n    this.props.handleFilterBoxChange(event.target.value)\n  }\n\n  handleSubmit = event => {\n    event.preventDefault()\n  }\n\n  render() {\n    const { value } = this.props\n    return (\n      <form onSubmit={this.handleSubmit}>\n        <TextField\n          label=\"Search\"\n          InputProps={{\n            inputProps: {\n              'data-testid': 'search',\n              'aria-label': 'Search',\n              onChange: this.handleChange,\n            },\n          }}\n          value={value}\n          margin=\"normal\"\n          variant=\"outlined\"\n        />\n      </form>\n    )\n  }\n}\n\nexport default FilterBox\n","const BASE_URL =\n  'https://us-central1-user-management-9c3b4.cloudfunctions.net/webApi/api/v1'\nconst USERS_URL = '/users'\n\nexport { BASE_URL, USERS_URL }\n","const logUrlError = url => console.log('Incorrect url format/type: ', url)\n\nexport { logUrlError }\n","import React, { Component } from 'react'\nimport Grid from '@material-ui/core/Grid'\n\nimport UserTable from './UserTable'\nimport FilterBox from './FilterBox'\n\nimport { getFullName } from './helpers'\nimport { http } from '../../utils/httpModule'\nimport { logUrlError } from '../../utils/errorLogs'\nimport { USERS_URL } from '../../utils/constants/urls'\n\nclass Listing extends Component {\n  state = {\n    users: [],\n    filterText: '',\n  }\n\n  componentDidMount() {\n    http\n      .GET(USERS_URL)\n      .map(res => Object.values(res.data.users))\n      .fork(logUrlError, users => {\n        localStorage.setItem('users', JSON.stringify(users))\n        this.setState({ users })\n      })\n  }\n\n  /**\n   * @param { text } string\n   */\n  handleFilterBoxChange = text => {\n    this.setState({ filterText: text })\n  }\n\n  filterUsersByText = (users, text) => {\n    return users.filter(user => {\n      const regex = new RegExp(text, 'i')\n      if (\n        regex.test(getFullName(user.first_name, user.last_name)) ||\n        regex.test(user.email)\n      ) {\n        return true\n      }\n      return false\n    })\n  }\n\n  render() {\n    const { users, filterText } = this.state\n    const filteredUsers = this.filterUsersByText(users, filterText)\n    return (\n      <Grid container spacing={16} data-testid=\"listing\">\n        <Grid item xs={6}>\n          <FilterBox handleFilterBoxChange={this.handleFilterBoxChange} />\n        </Grid>\n        <Grid item xs={12}>\n          <UserTable searchValue={filterText} users={filteredUsers} />\n        </Grid>\n      </Grid>\n    )\n  }\n}\n\nexport default Listing\n","import React, { Component } from 'react'\nimport { Switch, Route, BrowserRouter } from 'react-router-dom'\n\nimport Details from './Details/Details'\nimport Listing from './Listing/Listing'\n\nclass App extends Component {\n  render() {\n    return (\n      <BrowserRouter>\n        <Switch>\n          <Route path=\"/\" component={Listing} />\n          <Route path=\"/details/:email\" component={Details} />\n        </Switch>\n      </BrowserRouter>\n    )\n  }\n}\n\nexport default App\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n)\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href)\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config)\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          )\n        })\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config)\n      }\n    })\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing\n        if (installingWorker == null) {\n          return\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              )\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration)\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.')\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration)\n              }\n            }\n          }\n        }\n      }\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error)\n    })\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type')\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload()\n          })\n        })\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config)\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      )\n    })\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister()\n    })\n  }\n}\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport './index.css'\nimport App from './components/App'\nimport * as serviceWorker from './serviceWorker'\n\nReactDOM.render(<App />, document.getElementById('root'))\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister()\n"],"sourceRoot":""}